```
class Solution {
public:
    unordered_map<string,int>m1;
    int get(vector<int> &nums, int target, int sum, int i)
    {
      string key = to_string(i) + "x" + to_string(sum);
        if(m1.find(key)!=m1.end())return m1[key];
        if(i >= nums.size())
        {
            if(sum == target)return 1;
            return 0;
        }
        int cnt = 0;
        cnt = get(nums, target, sum + nums[i], i + 1);
        cnt += get(nums, target, sum - nums[i], i + 1);
       m1[key] = cnt;
        return cnt;
    }
    int findTargetSumWays(vector<int>& nums, int target) {
          int n = nums.size();
      // vector<vector<int>>dp(n,vector<int>(target+1, -1));
        return get(nums, target, 0,0);
    
    }
};
  ```
